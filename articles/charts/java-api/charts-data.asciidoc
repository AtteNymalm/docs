---
title: Chart Data
order: 6
layout: page
---

[[charts.data]]
= Chart Data

Chart data is stored in a data series model that contains information about the
visual representation of the data points in addition to their values. There are
a number of different types of series - [classname]#DataSeries#,
[classname]#ListSeries#, [classname]#AreaListSeries#, and
[classname]#RangeSeries#.

[[charts.data.listseries]]
== List Series

The [classname]#ListSeries# is essentially a helper type that makes the handling
of simple sequential data easier than with [classname]#DataSeries#. The data
points are assumed to be at a constant interval on the X axis, starting from the
value specified with the [literal]#++pointStart++# property (default is 0) at
intervals specified with the [literal]#++pointInterval++# property (default is
1.0). The two properties are defined in the [classname]#PlotOptions# for the
series.

The Y axis values are given in a [classname]#List&lt;Number&gt;#, or with ellipsis or
an array.

[source, java]
----
ListSeries series = new ListSeries(
      "Total Reindeer Population",
      181091, 201485, 188105, ...);
PlotOptionsLine plotOptions = new PlotOptionsLine();
plotOptions.setPointStart(1959);
series.setPlotOptions(plotOptions);
conf.addSeries(series);
----

You can also add them one by one with the [methodname]#addData()# method, which
is typical when converting from some other representation.

[source, java]
----
// Original representation
int data[][] = reindeerData();

// Create a list series with X values starting from 1959
ListSeries series = new ListSeries("Reindeer Population");
PlotOptionsLine plotOptions = new PlotOptionsLine();
plotOptions.setPointStart(1959);
series.setPlotOptions(plotOptions);

// Add the data points
for (int row[]: data)
    series.addData(row[1]);

conf.addSeries(series);
----

If the chart has multiple Y axes, you can specify the axis for the series by its
index number with [methodname]#setyAxis()#.


[[charts.data.dataseries]]
== Generic Data Series

The [classname]#DataSeries# can represent a sequence of data points at an
interval as well as scatter data. Data points are represented with the
[classname]#DataSeriesItem# class, which has [parameter]#x# and [parameter]#y#
properties for representing the data value. Each item can be given a category
name.

[source, java]
----
DataSeries series = new DataSeries();
series.setName("Total Reindeer Population");
series.add(new DataSeriesItem(1959, 181091));
series.add(new DataSeriesItem(1960, 201485));
series.add(new DataSeriesItem(1961, 188105));
series.add(new DataSeriesItem(1962, 177206));

// Modify the color of one point
series.get(2).getMarker().setFillColor(SolidColor.RED);
conf.addSeries(series);
----

Data points are associated with some visual representation parameters: marker
style, selected state, legend index, and dial style (for gauges). Most of them
can be configured at the level of individual data series items, the series, or
in the overall plot options for the chart. The configuration options are
described in
<<dummy/../../../charts/java-api/charts-configuration#charts.configuration,"Chart
Configuration">>. Some parameters, such as the sliced option for pie charts is
only meaningful to configure at item level.

[[charts.data.dataseries.add]]
=== Adding and Removing Data Items

New [classname]#DataSeriesItem# items are added to a series with the
[methodname]#add()# method. The basic method takes just the data item, but the
other method takes also two boolean parameters. If the [parameter]#updateChart#
parameter is [literal]#++false++#, the chart is not updated immediately. This is
useful if you are adding many points in the same request.

The [parameter]#shift# parameter, when [literal]#++true++#, causes removal of
the first data point in the series in an optimized manner, thereby allowing an
animated chart that moves to left as new points are added. This is most
meaningful with data with even intervals.

You can remove data points with the [methodname]#remove()# method in the series.
Removal is generally not animated, unless a data point is added in the same
change, as is caused by the [parameter]#shift# parameter for the
[methodname]#add()#.


[[charts.data.dataseries.update]]
=== Updating Data Items

If you update the properties of a [classname]#DataSeriesItem# object, you need
to call [methodname]#update()# method for the series with the item as the
parameter. Changing the coordinates of a data point in this way causes animation
of the change.


[[charts.data.dataseries.range]]
=== Range Data

Range charts expect the Y values to be specified as minimum-maximum value pairs.
The [classname]#DataSeriesItem# provides [methodname]#setLow()# and
[methodname]#setHigh()# methods to set the minimum and maximum values of a data
point, as well as a number of constructors that accept the values.

[source, java]
----
RangeSeries series =
    new RangeSeries("Temperature Extremes");

// Give low-high values in constructor
series.add(new DataSeriesItem(0, -51.5, 10.9));
series.add(new DataSeriesItem(1, -49.0, 11.8));

// Set low-high values with setters
DataSeriesItem point = new DataSeriesItem();
point.setX(2);
point.setLow(-44.3);
point.setHigh(17.5);
series.add(point);
----

The [classname]#RangeSeries# offers a slightly simplified way of adding ranged
data points, as described in <<charts.data.rangeseries>>.



[[charts.data.rangeseries]]
== Range Series

The [classname]#RangeSeries# is a helper class that extends
[classname]#DataSeries# to allow specifying interval data a bit easier, with a
list of minimum-maximum value ranges in the Y axis. You can use the series in
range charts, as described in
<<dummy/../../../charts/java-api/charts-charttypes#charts.charttypes.rangecharts,"Area and
Column Range Charts">>.

For X axis, the coordinates are generated at fixed intervals starting from the
value specified with the [literal]#++pointStart++# property (default is 0) at
intervals specified with the [literal]#++pointInterval++# property (default is
1.0).

[[charts.data.rangeseries.data]]
=== Setting the Data

The data in a [classname]#RangeSeries# is given as an array of minimum-maximum
value pairs for the Y value axis. The pairs are also represented as arrays. You
can pass the data using the ellipsis in the constructor or the
[methodname]#setData()#:

[source, java]
----
RangeSeries series =
    new RangeSeries("Temperature Ranges",
    new Double[]{-51.5,10.9},
    new Double[]{-49.0,11.8},
    ...
    new Double[]{-47.0,10.8});
conf.addSeries(series);
----

Or, as always with variable arguments, you can also pass them in an array, in
the following for the [methodname]#setData()#:

[source, java]
----
series.setRangeData(new Double[][] {
    new Double[]{-51.5,10.9},
    new Double[]{-49.0,11.8},
    ...
    new Double[]{-47.0,10.8}});
----



[[charts.data.containerseries]]
== Container Data Series

The [classname]#ContainerDataSeries# is an adapter for binding Vaadin
[interfacename]#Container# data sources to charts. The container needs to have
properties that define the name, X-value, and Y-value of a data point. The
default property IDs of the three properties are " [literal]#++name++#", "
[literal]#++x++#", and " [literal]#++y++#", respectively. You can set the
property IDs with [methodname]#setNamePropertyId()#,
[methodname]#setYPropertyId()#, and [methodname]#setXPropertyId()#,
respectively. If the container has no [literal]#++x++# property, the data is
assumed to be categorical.

In the following example, we have a [classname]#BeanItemContainer# with
[classname]#Planet# items, which have a [literal]#++name++# and
[literal]#++diameter++# property. We display the container data both in a Vaadin
[classname]#Table# and a chart.

[source, java]
----
// The data
BeanItemContainer<Planet> container =
        new BeanItemContainer<Planet>(Planet.class);
container.addBean(new Planet("Mercury", 4900));
container.addBean(new Planet("Venus", 12100));
container.addBean(new Planet("Earth", 12800));
...

// Display it in a table
Table table = new Table("Planets", container);
table.setPageLength(container.size());
table.setVisibleColumns("name","diameter");
layout.addComponent(table);

// Display it in a chart
Chart chart = new Chart(ChartType.COLUMN);
... Configure it ...

// Wrap the container in a data series
ContainerDataSeries series =
        new ContainerDataSeries(container);

// Set up the name and Y properties
series.setNamePropertyId("name");
series.setYPropertyId("diameter");

conf.addSeries(series);
----

As the X axis holds categories rather than numeric values, we need to set up the
category labels with an array of string. There are a few ways to do that, some
more efficient than others, below is one way:

[source, java]
----
// Set the category labels on the axis correspondingly
XAxis xaxis = new XAxis();
String names[] = new String[container.size()];
List<Planet> planets = container.getItemIds();
for (int i=0; i<planets.size(); i++)
    names[i] = planets.get(i).getName();
xaxis.setCategories(names);
xaxis.setTitle("Planet");
conf.addxAxis(xaxis);
----

The result can be seen in <<figure.charts.data.containerseries>>.

[[figure.charts.data.containerseries]]
.Table and Chart Bound to a Container
image::img/charts-containerdataseries.png[]


[[charts.data.drilldown]]
== Drill-Down

Vaadin Charts allows drilling down from a chart to a more detailed view by
clicking an item in the top-level view. To enable the feature, you need to
provide a separate data series for each of the detailed views by calling the
[methodname]#addItemWithDrilldown()# method. When the user clicks on a
drill-down item, the current series is animated into the the linked drill-down
series. A customizable back button is provided to navigate back to the main
series, as shown in <<figure.charts.data.drilldown.drilldown-details>>.

[[figure.charts.data.drilldown.drilldown-details]]
.Detailed series after a drill-down
image::img/charts-drilldown-details.png[]

There are two ways to use drill-down: synchronous and asynchronous.

[[charts.data.drilldown.sync]]
=== Synchronous

When using synchronous drill-down, you provide the top-level series and all the
series below it beforehand. The data is transferred to the client-side at the
same time and no client-server communication needs to happen for the drill-down.
The drill-down series must have an identifier, set with [methodname]#setId()#,
as shown below.

[source, java]
----
DataSeries series = new DataSeries();

DataSeriesItem mainItem = new DataSeriesItem("MSIE", 55.11);

DataSeries drillDownSeries = new DataSeries("MSIE versions");
drillDownSeries.setId("MSIE");

drillDownSeries.add(new DataSeriesItem("MSIE 6.0", 10.85));
drillDownSeries.add(new DataSeriesItem("MSIE 7.0", 7.35));
drillDownSeries.add(new DataSeriesItem("MSIE 8.0", 33.06));
drillDownSeries.add(new DataSeriesItem("MSIE 9.0", 2.81));

series.addItemWithDrilldown(mainItem, drillDownSeries);
----


[[charts.data.drilldown.async]]
=== Asynchronous

When using asynchronous drill-down, you omit the drill-down series parameter.
Instead, you provide a callback method with
[methodname]#Chart.setDrillDownCallback()#. When the user clicks an item in the
series, the callback is called to provide a drill-down series.

[source, java]
----
DataSeries series = new DataSeries();

DataSeriesItem mainItem = new DataSeriesItem("MSIE", 55.11);

series.addItemWithDrilldown(mainItem);

chart.setDrilldownCallback(new DrilldownCallback() {
    @Override
    public Series handleDrilldown(DrilldownEvent event) {
        DataSeries drillDownSeries = new DataSeries("MSIE versions");

        drillDownSeries.add(new DataSeriesItem("MSIE 6.0", 10.85));
        drillDownSeries.add(new DataSeriesItem("MSIE 7.0", 7.35));
        drillDownSeries.add(new DataSeriesItem("MSIE 8.0", 33.06));
        drillDownSeries.add(new DataSeriesItem("MSIE 9.0", 2.81));

        return drillDownSeries;
    }
});
----

You can use the event to decide what kind of series you want to return. The
event contains, for example, a reference to the item that was clicked. Note that
the same callback is used for all items. The callback can also return null.
Returning null will not trigger a drilldown.
