---
title: Application Theme
order: 25
layout: page
---

= Application Theme

Application Theme is the standard way to organize themes in a Vaadin application, making it easier to switch between themes and allow packaging a theme to reuse in other Vaadin applications.

== Define Application Themes

Figure 1 illustrates the contents of a theme:

.Contents of an application theme
image::images/content-of-application-theme.png[width="70%"]


=== Theme Folder
Application themes are placed under the `frontend/theme/` folder.
This location is fixed.
Each theme is in a separate folder, the folder name is also the theme name.

=== Component Styles

Component-specific style sheets are placed under the `components` folder.
The file name must match the component name that you want to style.
See <<styling-components#,Styling Components>>.

=== Static Resources

You can create folders for static resources, such as images or fonts.
When using in a style sheet, the resource location is relative to `frontend/theme/` folder.

For example, in Figure 1, `global.css` file can have `background: url("theme/my-theme/images/bg.jpg");`

=== Global Styles

Application-specific styling across application views and application-specific components are defined in CSS files under the theme folder.

For example, <<css-custom-properties#,CSS custom properties>> or `@font-face` can be defined in a `global.css` file.
See <<styling-applications#,Styling Applications>>.

=== Theme Configuration

==== Assets

Assets like fonts and images from an npm dependency can be used in the theme after mapping them from the dependency to local URIs, by adding an `assets` block in `theme.json`.

[source, JSON]
----
"assets": {
  "@foo/bar": {
    "images/**": "foobar/images"
  }
}
----

A style sheet in the theme can use the assets using the local path defined in `theme.json`.

[source, CSS]
----
background-image: url('foobar/images/logo.svg');
----

==== Extend an Application Theme

An application theme can extend another one by adding a `parent` property to theme.json.
For example, to extend a theme called "acme-base":

[source, JSON]
----
{
  "parent": "acme-base"
}
----

==== Use at-rules for Components in non-Vaadin Applications

To make at-rules work for components embedded into non-Vaadin applications (for example <<../flow/embedding-flow-applications/tutorial-webcomponent-intro,WebComponentExporter>>), add a file called `document.css` to the theme folder, and write at-rules there.

CSS in this file is applied to the document root rather than the page body or shadow root, to support at-rules that don't work inside shadow roots.

At-rules in npm dependencies are declared in `theme.json` using `importCss` property:
[source, JSON]
----
{
  "importCss": ["@foo/bar/baz.css"] 
}
----

NOTE: It is highliy recommended to use https://vaadin.com/api/platform/com/vaadin/flow/component/dependency/NpmPackage.html[`@NpmPackage`] for installing npm dependencies so they won't be lost in case you accidentially remove `package.json`.

== Use application themes

In server-side views (Java), use the [classname]#@Theme# annotation to apply an application theme.
You must set the annotation for the <<../flow/routing/tutorial-routing-annotation#,root navigation>> class or the <<../flow/routing/tutorial-router-layout#,router layout>> defined in the [classname]#@Route# annotation.
Otherwise you get an exception on startup.

[source, Java]
----
include::src/main/java/com/vaadin/flow/tutorial/theme/UsingComponentThemes.java[tags=lumo, indent=0, group=Java]
----

A theme variant can also be applied.

[source, Java]
----
include::src/main/java/com/vaadin/flow/tutorial/theme/UsingComponentThemes.java[tags=lumo-dark, indent=0, group=Java]
----
See <<theme-variants#global-variants>>.

NOTE: Any changes to theme folder contents (add/remove files, file modifications) are automatically picked up by webpack.
If a running app has live reload available, you can wait for it to reload the changes, otherwise, you can manually refresh the browser.

== Application Theme as a Dependency

=== Create a Theme Dependency

- Create a separate project with the theme folder inside `src/main/resources/META-INF/resources/theme/`
- Put the theme assets into the theme folder
- Build the project into a JAR file

=== Apply Theme to Application Project

- Add the theme JAR as a dependency in a Vaadin app project
- Apply the theme with the `@Theme` annotation
