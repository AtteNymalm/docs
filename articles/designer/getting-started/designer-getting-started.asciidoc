---
title: Getting Started with Vaadin Flow
order: 6
layout: page
---

[[designer.getting-started-with-flow]]
= Getting Started

Vaadin Designer works with projects using Vaadin Flow.
You can get started with a Flow project with these instructions: https://vaadin.com/start#vaadin10

[[designer.getting-started.design]]
== Creating a Vaadin 10 Design

With your project selected, select "File > New > Other" (or press Ctrl+N), choose
[guilabel]#Vaadin 10 Design# from the list, and click [guibutton]#Next#.

[[figure.designer.getting-started.design.new]]
.Creating a New Vaadin 10 Design in Eclipse
image::images/designer-3-getting-started-vaadin-10.png[width=60%, scaledwidth=80%]

In the next step, make sure the locations are correct.
The design file must be placed into the _frontend_ folder or one of its sub-folders.
You can also choose to create a Java companion file together with the new design.
The companion file can be located under any of the project's Java source roots.

[[figure.designer.getting-started.design.parameters]]
.New Design Parameters
image::images/designer-3-getting-started-vaadin-10-next.png[width=60%, scaledwidth=80%]

Give your design a descriptive name. The name must be a valid
https://www.w3.org/TR/custom-elements/#valid-custom-element-name[HTML Custom Element name].

For example, the name [classname]#user-editor-design# will result in
[filename]#user-editor-design.html# and [filename]#UserEditorDesign.java#.

Choose [guibutton]#Finish# to create the design and open Vaadin Designer.


[[designer.getting-started.gui]]
== Vaadin Designer GUI Overview

Vaadin Designer is fully integrated with the IDE and its views can therefore be
freely moved and arranged as you wish.

To be able to successfully use the Designer, you will need the Outline, Palette
and Properties views, in addition to the main editor.

[[figure.designer.getting-started.gui]]
.Panels in Vaadin Designer
image::images/designer-3-getting-started-editor.png[width=100%, scaledwidth=100%]

The elements of the Vaadin Designer are as follows:

. Design file
. Companion file
. Editor (see below for close-up)
. Component palette
. Outline - component hierarchy
. Properties for the selected component

In the editor view, illustrated in <<figure.designer.getting-started.editor>>,
you have a number of controls in the toolbar.

[[figure.designer.getting-started.editor]]
.Component Editor
image::images/designer-3-getting-started-editor-toolbar.png[width=100%, scaledwidth=100%]

. Center viewport
. Viewport size and presets
. Rotate viewport (portrait / landscape)
. Send feedback
. Design mode
. Source code mode
. Preview mode
. Companion file connector
. External preview

IMPORTANT: By default, Vaadin Designer requires polymer dependency to render the whole viewport.
Therefore, your project must have [guilable]#Polymer# dependency placed inside _webapp_ folder
or configured using https://www.webjars.org/[webjars].

TIP: Vaadin Designer will use *_shared-styles.html_* file inside _webapp/styles/_ folder as a global styles definitions for the whole project.
[[designer.palette]]
= The Palette

The Palette appears on the right side of the editor. The Palette contains the web components available for the current design.
Users can drag a component from the Palette and drop it into the desired locations.

When a design is opened, the Designer searches the entire project for web components and loads them into the Palette.

[[figure.designer.palette.overview]]
.The Palette
image::images/designer-3-palette.png[width=20%, scaledwidth=50%]

There are 3 groups of components: Project Designs, Web Components and HTML Elements.

==== Project Designs
This group contains the designs from the project so that you can easily reuse them in the currently edited design.

==== Web Components
This group contains web components that are included the project, either as https://www.webjars.org/[WebJars] or Bower dependencies.

==== HTML Elements
This group contains Native HTML5 elements, such as _style, h1 to h6, div, li, ol, p, ul, a, span, img, script, col, table, button, form, input, label, slot_ and _template_.

TIP: Make sure to run `mvn install` before opening your project.
Otherwise, web components are not added into the Palette and your project will not work properly.

===== How the "Project Components" scanning actually works
Whenever you open a Vaadin 10 design, Vaadin Designer will scan whole project for you.
All html files with _dom-module_ and _template_ tags will be considered as web components and end up in "Web Components" section.

Additionally, Vaadin Designer supports web components inside https://www.webjars.org[webjars] dependencies. Those dependencies could be added using build tool, such as Gradle or Maven.

As a result, your palette might look a bit crowded. Palette [guilable]#Search field# can help you to find elements quickly. Hover over the element and palette status bar will show its location.

[[figure.designer.palette.statusbar]]
.Palette shows the filtered components
image::images/designer-3-palette-search-field.png[width=20%, scaledwidth=80%]

[[designer.outline]]
= The Outline

The Outline is shown on top-right corner of the IDE by default, containing the hierarchy of the opened design. +
You can drag and drop components from the Palette to the Outline and create your design's structure.

A Vaadin 10 design can have many root elements. +
Layout elements, such as _div, vaadin-form-layout, vaadin-split-layout, vaadin-horizontal-layout_ and _vaadin-vertical-layout_,
have their width and height expanded to 100% when they are roots.

Inside the Outline, you can also drag and drop a component around to re-arrange it,
or press "Delete" to remove a selected component.

[[figure.designer.palette.overview]]
.The Outline
image::images/designer-3-outline.png[width=40%, scaledwidth=60%]

[[designer.properties]]
= The Properties

The Properties lay under the Outline by default, showing the properties of a selected component. +

After selecting a component from the Editor or the Outline,
you can edit its properties in the Properties table.
It is a good idea to give components at least an *id* if they are to be used
from Java code to add logic (such as click listeners for buttons). +
Generally, this is needed for most controls, but not for most layouts.

[[figure.designer.palette.properties]]
.The Properties in IntelliJ IDEA (left) and Eclipse (right)
image::images/designer-3-properties.png[width=70%, scaledwidth=60%]

You can also add a new property by clicking on _Click here to add a string property_,
_Click here to add a boolean property_ (in IntelliJ IDEA) or the _Add a new property_ icon (in Eclipse).
