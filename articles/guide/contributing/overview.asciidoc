---
title: Overview
order: 1
layout: page
---

:experimental:
:commandkey: &#8984;

= Contributing to Open-Source Projects

Our open-source projects are released under the Apache 2.0 license. 
If you would like to contribute something, or want to hack on the code this document should help you get started.

We use GitHub issues to track bugs and enhancements. 
If you have a general usage question please ask questions and participate to discussion in https://discord.com/channels/732335336448852018/774366844684468284[Discord] and https://vaadin.com/forum[forum].
If you are reporting a bug, please help to speed up problem diagnosis by providing as much information as possible. 
Ideally, that would include a small sample project that reproduces the problem.

Helping to review pull requests is another great way to contribute. 
Your feedback can help to shape the implementation of new features. 
When reviewing pull requests, however, please refrain from approving or rejecting a PR.

== Basic Requirements

All contributions should target the `master` branch. 
We will pick the changes to correct version branches from the `master`. 

[IMPORTANT]
For enhancements and new features, you should always first discuss it in an GitHub issue, to make sure it is acceptable. 
The enhancement should have an Acceptance Criteria written to it that states what is needed to be done.

We like quality patches that solve problems. 
A quality patch follows good coding practices - it’s easy to read and understand. 
For more complicated fixes or features, the change should be broken down into several smaller easy to understand patches. 
Most of this is really just what we consider to be common sense and best development practices.

== Describe Your Changes

Properly formed Git commit subject line should always be able to complete the following sentence:

```
If applied, this commit will <your subject line here>
```

Describe your problem::

Whether your patch is a one-line bug fix or 5000 lines of a new feature, there must be an underlying problem that motivated you to do this work. 
Convince the reviewer that there is a problem worth fixing and that it makes sense for them to read past the first paragraph. 
This is often already described in bug/enhancement issue, but also summarise it in your commit message.

Describe user-visible impact::

Straight up crashes and lockups are pretty convincing, but not all bugs are that blatant. 
Even if the problem was spotted during code review, describe the impact you think it can have on users. 

Describe the solution::

Once the problem is established, describe what you are actually doing about it in technical detail.  It's important to describe the change in plain English for the reviewer to verify that the code is behaving as you intend it to.

Solve only one problem per patch::

If your description starts to get long, that's a sign that you probably need to split up your patch. See “Only one logical change per patch”.
+
Describe your changes in imperative mood, e.g. "make xyzzy do frotz". If the patch fixes a logged bug entry, refer to that bug entry by number or URL. 
+
However, try to make your explanation understandable without external resources.  
In addition to giving a URL to a ticket or bug description, summarise the relevant points of the discussion that led to the patch as submitted.

== Separate Your Changes

Separate all enhancements, fixes and new features into different pull requests.

For example, if your changes include both bug fixes and performance enhancements, separate those changes into two or more patches. 
If your changes include an API update, and a new component which uses that new API, separate those into two patches.

On the other hand, if you make a single change to numerous files, group those changes into a single patch.
Thus a single logical change is contained within a single patch.

The point to remember is that each patch should make an easily understood change that can be verified by reviewers.
Each patch should be justifiable on its own merits.

If one patch depends on another patch in order for a change to be complete, that is OK.
Simply note "this patch depends on patch X" in your patch description.

When dividing your change into a series of patches, take special care to ensure that the project builds and runs properly after each patch in the series.  
Developers using "git bisect" to track down a problem can end up splitting your patch series at any point; they will not thank you if you introduce bugs in the middle. 
Compilation failures are especially annoying to deal with. 

== Style-check Your Changes

Check your patch for basic style violations. 
There should be none if you have <<editor-settings,setup your project correctly>> following the instructions.
Patches causing unnecessary style/whitespace changes are messy and will likely be bounced back. 

[IMPORTANT]
If you are touching old files and want to update them to current style conventions, please do so in a separate commit/PR. 
It is usually best to have this commit be the first in the series.

== Include a Test

Ideally, we would like all patches to include <<testing,automated tests>>. 
Unit tests are preferred. 
If there’s a change to UI Code, we would additionally prefer an integration test.

After submitting a pull request, our CI system will trigger the verification build automatically, including integration tests and you will be able to see the whole build output and results.

Test cases should succeed with the patch and fail without the patch. 
That way, it’s clear to everyone that the test does in fact test what it is supposed to test. 

If the patch is a performance improvement, please include some benchmark data that tells us how much the performance is improved. 
You should also include the test code or UI class you used to benchmark. 

If you can clearly prove that the patch works, it dramatically increases the odds of it being included in a quick and timely fashion.

== Writing a Good Commit Message

Here is an example:

```
feat: Create a Valo icon font for icons in Valo

Valo uses only a handful of icons from Font Awesome. This change introduces a separate icon font for valo (9KB instead of 80KB) and decouples Valo from Font Awesome to enable updating Font Awesome without taking Valo into account.

This change also makes it easy to not load Font Awesome when using Valo by setting $v-font-awesome:false

For backwards compatibility, Font Awesome is loaded by default.

Fixes #18472
```

Subject line::
+
--
```
feat: Create a Valo icon font for icons in Valo
```

Start with a good subject message in imperative form with 50 chars or less. 
A properly formed Git commit subject line should always be able to complete the following sentence:

If applied, this commit will <__your subject line here__>
    
Pending if type of changes you are doing, the subject line should start with either `feat/fix/chore/refactor`. 
In case there are breaking changes, use ! after the prefix, like `refactor!:`. 
In case you don't know what to write there, let the reviewer do it when merging the PR.
--

Describe the problem::
+
```
Valo uses only a handful of icons from Font Awesome.
```

Describe the user impact & describe what was done to solve the problem::
+
```
This change introduces a separate icon font for valo (9KB instead of 80KB) and decouples Valo from Font Awesome to enable updating Font Awesome without taking Valo into account.

This change also makes it easy to not load Font Awesome when using Valo by setting $v-font-awesome:false

For backwards compatibility, Font Awesome is loaded by default
```

Reference the issue::
+
Reference an issue number using https://docs.github.com/en/free-pro-team@latest/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue[the magic words] to close the issue:
+
```
Fixes #18472
```
+
If the issue is not closed by this PR, you can still refer to it with e.g. `Part of #1234`.
In case the issue is in another repository, you can link to it with the syntax: `Part of vaadin/spring#1234` where the first part is for the organization, the second for the repository followed by the issue (or PR) number there.

== Respond to Review Comments

Your pull request will almost certainly get comments from reviewers on ways in which the patch can be improved.  
You must respond to those comments; ignoring reviewers is a good way to get ignored in return.  
Review comments or questions that do not lead to a code change should almost certainly bring about a comment or changelog entry so that the next reviewer better understands what is going on.

Be sure to tell the reviewers what changes you are making. 
Respond politely to comments and address the problems they have pointed out. 

If there is feedback that is blocking merging of the pull request, and there is no response from the author in a reasonable time, we may reject it. 
You are then of course free to resubmit the pull request. 
The rejection is done not out of spite, but to keep the queue of incoming pull requests manageable and to prevent the queue from spiraling out of control. 

== Don't Get Discouraged - or Impatient

After you have submitted your change, be patient and wait.  
Reviewers are busy people and may not get to your patch right away. 
Ideally, we try to get a response within one business day.

You should receive comments within a week or so; if that does not happen, make sure that you have sent your patches to the right place.  
Wait for a minimum of one week before resubmitting or pinging reviewers - possibly longer during busy times like merge windows for minor or major release versions. 

[#editor-settings.cards.quiet]
== Editor Settings

[.card.wide]
=== IntelliJ IDEA

<<editor-settings-intellij-idea#,See instructions>>

[.card.wide]
=== Eclipse
<<editor-settings-eclipse#,See instructions>>

[#testing.cards.quiet]
== Testing

[.card.wide]
=== Unit testing in Flow
<<flow-unit-testing#,See instructions>>

[.card.wide]
=== Integration testing in Flow
<<flow-integration-testing#,See instructions>>

[.card.wide]
=== Testing of web components
<<web-component-testing#,See instructions>>

[.card.wide]
=== Testing of Java integration for web components
<<web-component-integration-testing#,See instructions>>
