---
title: Frontend Tools
order: 150
layout: page
---

= Frontend Tools

This section describes the required frontend development tools and how Vaadin utilizes them.

== Node.js

Vaadin uses the Node.js runtime in development mode to run the Webpack development server, as well as the Node.js package manager (npm) and package runner (npx) to fetch, install and run frontend packages.

As of Vaadin 14.2, Node.js can be installed in three different ways:

- Automatically into user's home directory (`~/.vaadin/node`).
- Globally with downloaded installer or package manager (such as Homebrew).
  Node.js can be downloaded from https://nodejs.org/en/download/[https://nodejs.org/en/download/].
  Installing Node.js automatically installs the command-line tools `npm` and `npx` as well.
- Project-local installation (`_project_dir_/node`) using the frontend-maven-plugin[https://github.com/eirslett/frontend-maven-plugin].

If Node.js is found globally, Vaadin validates that it is a supported version; if it is too old, it installs a compatible version into `~/.vaadin`.
We recommend using the latest LTS version.
A project-local installation will always take precedence over a global or `~/.vaadin` installation.

Older platform versions than 14.2 require manual installation of Node.js.
The Vaadin Maven plugin will inform how to do this in a single command if it detects missing tools.
Installation can be either global or in the project directory via its Maven plugin as described above.

=== Proxy Settings for Downloading Frontend Toolchain

If you are behind a proxy server you should config your proxy settings so Vaadin can use them to download the frontend toolchain.
There are four places where Vaadin read proxy settings from.
You can set your proxy data in either of the followings:

. system properties:
. {project directory}/.npmrc file
. {user home directory}/.npmrc file
. environment variables

The settings are read from the list above in order.
For example, if you set your proxy in system properties, other sources will be ignored.
The keys that you should use to define your proxy settings are as follows:

[cols=3]
|===
|In System Properties and Environment Variables
|In .npmrc files
|Description

|HTTP_PROXY
|proxy
|a proxy to use for outgoing http requests

|HTTPS_PROXY
|https-proxy
|a proxy to use for outgoing https requests

|NOPROXY
|noproxy
|a comma-separated string of domain extensions that a proxy should not be used for
|===

`.npmrc` file structure is ini (like Java properties files).
It includes pairs of key-values separated by `=`.
Here is an example of the content of such a file with proxy settings:
```
proxy=http://myusername:s3cr3tpassw0rd@proxyserver1:8085"
https-proxy=http://myusername:s3cr3tpassw0rd@proxyserver1:8086"
noproxy=192.168.1.1,vaadin.com,mycompany.com
```

To learn more about `.npmrc` file you can see https://docs.npmjs.com/configuring-npm/npmrc[official npmrc document].

== PNPM

pnpm is a caching package manager that reduces the download time across multiple projects by caching the downloaded packages.
It is the recommended and default package manager for Vaadin 19 projects.

You do not need to install pnpm separately.
Vaadin uses npx, the node package runner to automatically resolve a compatible pnpm version (5 or newer).
If you have installed pnpm globally (via `npm install -g pnpm`), the installed version will be used by default unless it is too old.

